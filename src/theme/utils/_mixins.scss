@use 'variables';

@function spacing($multiplier) {
	@return calc(var(--base-spacing) * #{$multiplier});
}

/** Base color should be HUE, SATURATION, without providing Lightness */
@mixin generate-palette($base-color, $name) {
	@for $i from 1 to 10 {
		--color-#{$name}-#{$i}0: #{hsl($base-color, $i * 10%)};
	}
}

@mixin generate-text-palette($base-color) {
	@each $emphasis, $opacity in ('high': 0.87, 'medium': 0.5, 'low': 0.18) {
		--text-#{$emphasis}: #{hsla($base-color, $opacity)};
	}
}

@mixin breakpoint-up($breakpoint) {
	@if map-has-key(variables.$breakpoints, $breakpoint) {
		@media only screen and (min-width: map-get(variables.$breakpoints, $breakpoint)) {
			@content;
		}
	} @else {
		@warn "No `#{$breakpoint}` breakpoint. Available breakpoints are: #{map-keys(variables.$breakpoints)}.";
	}
}

@mixin breakpoint-down($breakpoint) {
	@if map-has-key(variables.$breakpoints, $breakpoint) {
		@media only screen and (max-width: map-get(variables.$breakpoints, $breakpoint)) {
			@content;
		}
	} @else {
		@warn "No `#{$breakpoint}` breakpoint. Available breakpoints are: #{map-keys(variables.$breakpoints)}.";
	}
}

@mixin breakpoint-only($breakpoint) {
	@if map-has-key(variables.$breakpoints, $breakpoint) {
		@if $breakpoint == 'xl' {
			@media only screen and (min-width: map-get(variables.$breakpoints, $breakpoint)) {
				@content;
			}
		} @else {
			// get the key/value pair for the adjacent bigger breakpoint.
			$next-breakpoint: nth(
				variables.$breakpoints,
				index(map-keys(variables.$breakpoints), $breakpoint) + 1
			);
			// get value from key/value pair
			$next-breakpoint-value: nth($next-breakpoint, 2);
			@media only screen and (min-width: map-get(variables.$breakpoints, $breakpoint)) and (max-width: $next-breakpoint-value) {
				@content;
			}
		}
	} @else {
		@warn "No `#{$breakpoint}` breakpoint. Available breakpoints are: #{map-keys($breakpoints)}.";
	}
}
